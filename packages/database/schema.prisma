datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"
  output   = env("API_TRPC_DATA_MODEL_TYPES_DIR")
  fileName = "types.ts"
}

generator docs {
  provider              = "node node_modules/prisma-docs-generator"
  output                = env("DATABASE_DOCS_DIR")
  includeRelationFields = true
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = env("DATABASE_DIAGRAMS_DIR")
  projectName         = "Digital Garage"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "DB ERD Schema for Digital Garage"
}

generator erd {
  provider  = "prisma-erd-generator"
  theme     = "default"
  output    = env("DATABASE_ERD_PATH")
  mmdcPath  = "node_modules/.bin"
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
  // output = env("API_TRPC_DATA_MODEL_CLASSES_DIR")
}

generator prismabox {
  provider                    = "prismabox"
  output                      = env("API_TRPC_PRISMABOX_DIR")
  typeboxImportVariableName   = "t"
  typeboxImportDependencyName = "elysia"
  additionalProperties        = true
  inputModel                  = true
}

generator trpc {
  provider       = "prisma-trpc-generator"
  withZod        = true
  withMiddleware = true
  withShield     = true
  output         = env("API_TRPC_ROUTERS_ZOD_SCHEMAS_DIR")
  contextPath    = "../api/src/trpc"
  isGenerateSelect  = true
  isGenerateInclude = true
}

generator custom_generator {
  provider = "prisma-generator-fake-data"
  output   = env("DATABASE_FAKE_DATA_PATH")
}

generator express {
  provider = "prisma-generator-express"
  output   = env("DATABASE_EXPRESS_DIR")
}

enum AuthProvider {
  EMAIL_PASSWORD
  GOOGLE
  APPLE
}

enum AccountStatus {
  ONBOARDING
  SELECT_SUBSCRIPTION
  ACTIVE
}

enum SubscriptionPlan {
  DAY
  WEEK
  MONTH
  YEAR
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum PaymentStatus {
  PAID
  REFUNDED
  FAILED
}

enum TransferStatus {
  REQUESTED
  ACCEPTED
  REJECTED
}

enum FieldType {
  STRING
  NUMBER
  DATE
  BOOLEAN
}

enum PostCategory {
  GALLERY
  HISTORY
}

enum PostType {
  REMINDER
  INVOICE
  DOCUMENT
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  firebaseUid       String            @unique
  isEmailVerified   Boolean           @default(false)
  firstName         String?
  lastName          String?
  displayPicture    String?
  location          String?
  accountStatus     AccountStatus     @default(ONBOARDING)
  sessions          Session[]
  vehicles          Vehicle[]
  posts             VehiclePost[]
  transfersReceived VehicleTransfer[] @relation("receivedTransfers")
  transfersSent     VehicleTransfer[] @relation("sentTransfers")
  subscription      Subscription?
  ownerships        Ownership[]
}

model Session {
  id                String        @id @default(uuid())
  token             String        @unique
  expiresAt         DateTime
  provider          AuthProvider
  deviceFingerprint String        @unique
  userId            String
  user              User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([deviceFingerprint, userId])
}

model Subscription {
  id            String              @id @default(uuid())
  productId     String
  plan          SubscriptionPlan?
  status        SubscriptionStatus  @default(ACTIVE)
  startDate     DateTime?
  endDate       DateTime?
  expiresAt     DateTime?
  userId        String              @unique
  user          User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments      Payment[]
}

model Payment {
  id              String        @id @default(uuid())
  price           Float
  currencyCode    String
  status          PaymentStatus
  transactionId   String
  transactionDate DateTime
  subscriptionId  String
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model Photo {
  id            String        @id @default(uuid())
  url           String
  thumbnailUrl  String
  postId        String?
  post          VehiclePost?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  ownershipId   String?       @unique
  ownership     Ownership?    @relation(fields: [ownershipId], references: [id], onDelete: Cascade)
}

model Ownership {
  id              String            @id @default(uuid())
  userId          String
  vehicleId       String
  isCurrentOwner  Boolean           @default(true)
  vehicleDisplayPhoto    Photo?
  startDate       DateTime          @default(now())
  endDate         DateTime?
  user            User?             @relation(fields: [userId], references: [id])
  vehicle         Vehicle?          @relation(fields: [vehicleId], references: [id])
  posts           VehiclePost[]
  documents       VehicleDocument[]
  excludedPosts   String[]          // IDs of posts excluded for this owner
  excludedPhotos  String[]          // IDs of photos excluded for this owner
  excludedDocs    String[]          // IDs of documents excluded for this owner

  @@unique([userId, vehicleId])
}

model Vehicle {
  id                 String            @id @default(uuid())
  make               String
  model              String
  registrationNumber String            @unique
  details            VehicleDetails    @relation(fields: [registrationNumber], references: [registrationNumber])
  ownerId            String
  owner              User?             @relation(fields: [ownerId], references: [id])
  ownerships         Ownership[]
  transfers          VehicleTransfer[]
}

model VehicleDetails {
  id                       String    @id @default(uuid())
  make                     String
  registrationNumber       String    @unique
  colour                   String
  yearOfManufacture        Int
  taxStatus                String
  taxDueDate               DateTime
  motStatus                String
  engineCapacity           Int
  co2Emissions             Int
  fuelType                 String
  markedForExport          Boolean
  typeApproval             String
  wheelplan                String
  // "artEndDate" may indicate that the vehicle is under some form of administrative restriction, which may prevent it from being used on public roads, sold, or transferred
  artEndDate               DateTime?
  motExpiryDate            DateTime?
  monthOfFirstRegistration DateTime?
  euroStatus               String?
  dateOfLastV5CIssued      DateTime?
  realDrivingEmissions     String?
  revenueWeight            Int?
  vehicle                  Vehicle?
}

model VehicleTransfer {
  id            String          @id @default(uuid())
  vehicleId     String
  vehicle       Vehicle?        @relation(fields: [vehicleId], references: [id])
  senderId      String
  sender        User?           @relation("sentTransfers", fields: [senderId], references: [id])
  recipientId   String
  recipient     User?           @relation("receivedTransfers", fields: [recipientId], references: [id])
  status        TransferStatus  @default(REQUESTED)
  transferDate  DateTime        @default(now())
  responseDate  DateTime?
  reason        String?         // Reason for transfer
}

model VehicleDocument {
  id            String          @id @default(uuid())
  fileUrl       String
  mimeType      String
  postId        String?
  post          VehiclePost?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  ownershipId   String?
  ownership     Ownership?      @relation(fields: [ownershipId], references: [id], onDelete: Cascade)
}

model VehiclePost {
  id           String          @id @default(uuid())
  date         DateTime
  title        String
  category     PostCategory    @default(GALLERY)
  description  String?
  type         PostType?
  photos       Photo[]
  documents    VehicleDocument[]
  createdById  String
  createdBy    User?           @relation(fields: [createdById], references: [id])
  ownershipId  String?
  ownership    Ownership?      @relation(fields: [ownershipId], references: [id], onDelete: Cascade)
}
